# 更改日期
list1[[1]]$birthday <- ymd("1997-03-21")
# 新增資料
list1[[2]]=list(name="blue",birthday=ymd(1998-08-24))
str(list1)
list1[[1]][["age"]]=21
list1[[2]]["age"]=21
str(list1)
list1[[1]][c("bloodtype","registered")]=list("ab",T)
str(list1)
list1[[1]][c("bloodtype","registered")]=list("ab",T)
str(list1)
list1[[1]][[-3]]
list1[[1]][c("bloodtype","registered")]=list("ab",T)
str(list1)
list1[[1]][-3]
list1[[1]][c("bloodtype","registered")]=list("ab",T)
str(list1)
list1[[1]][[3]]=NULL
list1
list1[[1]][c("bloodtype","registered")]=list("ab",T)
str(list1)
list1[[1]][[3]]=NULL
str(list1)
example$name(example$height>=170)
example$name[example$height>=170]
logic=example$height>=170
logic=example$height>=170
logic=example$height>=170
logic=example$height>=170
logic<-example$height>=170
logic<-example$height
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
logic<-example$height
logic=logic>=170
logic<-example$height>=170
example$name[logic]
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
View(transcript100to103)
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
# 各學屆2年級人數
table(transcript100to103$學屆)
# 各學屆2年級成績大於85年數
table(transcript100to103$學屆[pick_above85])
pick_above85 <-
transcript100to103$`成績` > 85
pick_above85 <-
transcript100to103$`成績` > 85
example$birthday
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
pick_above85 <-
transcript100to103$`成績` > 85
example$birthday
class(example$birthday)
typeof(example$birthday)
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
pick_evens <- (sequenceNums %% 2) == 0
sequenceNums[pick_evens]
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
pick_evens <- sequenceNums %% 2 == 0
sequenceNums[pick_evens]
x <- c(1,5,8)
y <- c(5,8)
# x裡的元素值是不是屬於y集合
x %in% y
x2 <- c(1,NA,10)
y2 <- c(-1,NA,20)
x3 <- c(NA,"小花")
y3 <- c(NA,"小華")
x2
is.na(x2)
c(22,NA,18) -> a
a==NA
is.na(a)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
str(badEmployers)
# violatedArticles
factor(badEmployers$law)
# violatedArticles
levels(badEmployers$law)
# violatedArticles
levels(badEmployers$law)
# violatedArticles
violatedArticles=levels(as.factor(badEmployers$law))
violatedArticles
table(badEmployers$law)
# table_countsByArticle
table_countsByArticle=table(badEmployers$law)
class(table_countsByArticle)
table_countsByArticle
table_countsByArticle=table(badEmployers$law)
table_countsByArticle
max(table_countsByArticle)
# mostViolatedArticle
mostViolatedArticle=max(table_countsByArticle)
names(mostViolatedArticle)
mostViolatedArticle=table_countsByArticle==507
names(mostViolatedArticle)
mostViolatedArticle=table_countsByArticle==507
mostViolatedArticle
mostViolatedArticle=table_countsByArticle==507
mostViolatedArticle=table_countsByArticle[mostViolatedArticle]
mostViolatedArticle=table_countsByArticle==507
mostViolatedArticle=table_countsByArticle[mostViolatedArticle]
mostViolatedArticle
mostViolatedArticle=table_countsByArticle==507
mostViolatedArticle=table_countsByArticle[mostViolatedArticle]
class(mostViolatedArticle)
mostViolatedArticle=table_countsByArticle==507
mostViolatedArticle=table_countsByArticle[mostViolatedArticle]
names(mostViolatedArticle)
badEmployers$lawContent
# mostViolatedArticle_content
levels(as.factor(badEmployers$lawContent))
# mostViolatedArticle_content
table(as.factor(badEmployers$lawContent))
# mostViolatedArticle_content
table(as.factor(badEmployers$lawContent))==507
# mostViolatedArticle_content
a=table(as.factor(badEmployers$lawContent))
b=a==507
a[b]
# mostViolatedArticle_content
a=table(as.factor(badEmployers$lawContent))
b=a==507
mostViolatedArticle_content=names(a[b])
mostViolatedArticle_content
a=table(as.factor(badEmployers$lawContent))
b=a==507
mostViolatedArticle_content=names(a[b])
class(mostViolatedArticle_content)
a=table(as.factor(badEmployers$lawContent))
b=a==507
mostViolatedArticle_content=names(a[b])
length(mostViolatedArticle_content)
badEmployers
# popularSentenceMonth
str(badEmployers)
# popularSentenceMonth
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
stringr::str_detect(badEmployers$dt,"2013/08")
# popularSentenceMonth
stringr::str_detect(badEmployers$dt,"/08/")
# popularSentenceMonth
a=table(as.factor(badEmployers$lawContent))
b=a==507
mostViolatedArticle_content=names(a[b])
mostViolatedArticle_content
for(i in c(1:12)){
paste0("m",i) =stringr::str_detect(badEmployers$dt,paste0(i,"/"))
}
table(stringr::str_detect(badEmployers$dt,/01/))
table(stringr::str_detect(badEmployers$dt,"/01/"))
# popularSentenceMonth
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
str(students10)
# chinese
str(table)
# chinese
ordered(as.factor(table$國文))
# chinese
chinese=ordered(as.factor(table$國文))
# chinese
chinese=ordered(as.factor(table$國文))
class(chinese)
# chinese
chinese=order(as.factor(table$國文))
class(chinese)
# chinese
chinese=ordered(as.factor(table$國文))
class(chinese)
# chinese
chinese=ordered(as.factor(table$國文))
chinese
str(students10)
# ntpu_namelist
c=stringr::str_detect(students10$志願)
d=stringr::str_detect(students10$志願)
a=stringr::str_detect(students10$志願)
stringr::str_detect(students10$志願)
stringr::str_detect(students10$志願)
stringr::str_detect(students10$志願)
stringr::str_detect(students10$志願)
c=stringr::str_detect(students10$志願,"北大")
c=stringr::str_detect(students10$志願,"北大")
ntpu_namelist=students10$姓名[c]
ntpu_namelist
namelist
# ntpu_econtpu_eco
students10$志願
# ntpu_econtpu_eco
students10
# ntpu_econtpu_eco
students10$國文>=12
# ntpu_econtpu_eco
students10$國文>=12
students10$英文+students10$數學>=12
# ntpu_econtpu_eco
students10$國文>=12
students10$英文+students10$數學>=26
# ntpu_econtpu_eco
c=students10$國文>=12
d=students10$英文+students10$數學>=26
e=students10$志願="北大經濟"
c+d+e==3
c=students10$國文>=12
d=students10$英文+students10$數學>=26
e=students10$志願="北大經濟"
c+d==3
# ntpu_econtpu_eco
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
chinese=ordered(as.factor(table$國文))
chinese
c=stringr::str_detect(students10$志願,"北大")
ntpu_namelist=students10$姓名[c]
ntpu_namelist
c=students10$國文>=12
d=students10$英文+students10$數學>=26
e=students10$志願=="北大經濟"
c+d+e==3
# ntpu_econtpu_eco
c=students10$國文>=12
d=students10$英文+students10$數學>=26
e=students10$志願=="北大經濟"
f=c+d+e==3
ntpu_econtpu_eco=students10$姓名[f]
ntpu_econtpu_eco
chinese=ordered(factor(table$國文))
chinese
ntpu_econtpu_eco%in%namelist
# congrats
ntpu_econtpu_eco[ntpu_econtpu_eco%in%namelist]
# congrats
g=ntpu_econtpu_eco[ntpu_econtpu_eco%in%namelist]
paste("恭喜",g,"同學錄取國立臺北大學經濟系")
# congrats
g=ntpu_econtpu_eco[ntpu_econtpu_eco%in%namelist]
congrats=paste("恭喜",g,"同學錄取國立臺北大學經濟系")
congrats
for(h in c(1:12)){i=sum(stringr::str_detect(badEmployers$dt,paste0(i,"/")))
}
# popularSentenceMonth
for(h in c(1:12)){i=sum(stringr::str_detect(badEmployers$dt,paste0(i,"/")))
}
i
# popularSentenceMonth
for(h in c(1:12)){paste0(i,"/")
}
i
# popularSentenceMonth
for(h in c(1:12)){i=paste0(i,"/")
}
i
# popularSentenceMonth
for(h in c(1:12)){i=paste0(h,"/")
}
i
# popularSentenceMonth
for(h in c(1:12)){
i=c(sum(stringr::str_detect(badEmployers$nt,paste0(h,"/"))))
}
i
# popularSentenceMonth
for(h in c(1:12)){
i=(sum(stringr::str_detect(badEmployers$nt,paste0(h,"/"))))
}
i
# popularSentenceMonth
for(h in c(1:12)){
i=(sum(stringr::str_detect(badEmployers$nt,"paste0(h,"/")")))
}
for(h in c(1:12)){
i=(sum(stringr::str_detect(badEmployers$nt,paste0(h,"/"))))
}
i
# popularSentenceMonth
for(h in c(1:12)){
i=c(paste0(h,"/"))
}
i
# popularSentenceMonth
for(h in c(1:12)){
i=c(paste0(h,"/"))
a=a+i
}
for(h in c(1:12)){
i=c(paste0(h,"/"))
a=c(a,i)
}
i
# popularSentenceMonth
for(h in c(1:12)){
i=cpaste0(h,"/")
a=c(a,i)
}
for(h in c(1:12)){
i=paste0(h,"/")
a=c(a,i)
}
i
# popularSentenceMonth
for(h in c(1:10)){
i=paste0(h,"/")
a=c(a,i)
}
i
# popularSentenceMonth
for(h in 1:12)){
for(i in 1:12)){
for(i in 1:12){
h=paste0(i,"/")
a=c(a,i)
}
i
# popularSentenceMonth
for(i in 1:12){
h=paste0(i,"/")
a=c(a,i)
}
a
# popularSentenceMonth
for(i in 1:12){
h=paste0(i,"/")
j=c(j,i)
}
j=NULL
for(i in 1:12){
h=paste0(i,"/")
j=c(j,i)
}
a
# popularSentenceMonth
j=NULL
for(i in 1:12){
h=paste0(i,"/")
j=c(j,i)
}
J
j=NULL
for(i in 1:12){
h=paste0(i,"/")
j=c(j,i)
}
j
# popularSentenceMonth
j=NULL
for(i in 1:12){
h=paste0(i,"/")
j=c(j,h)
}
j
# popularSentenceMonth
j=NULL
for(i in 1:12){
h=sum(stringr::str_detect(badEmployers$nt,paste0(i,"/")))
j=c(j,h)
}
j
# popularSentenceMonth
j=NULL
for(i in 1:12){
h=sum(stringr::str_detect(badEmployers$nt,paste0(i,"/")))
j=c(j,h)
}
j
# popularSentenceMonth
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
violatedArticles=levels(as.factor(badEmployers$law))
violatedArticles
table_countsByArticle=table(badEmployers$law)
table_countsByArticle
mostViolatedArticle=table_countsByArticle==507
mostViolatedArticle=table_countsByArticle[mostViolatedArticle]
mostViolatedArticle
a=table(as.factor(badEmployers$lawContent))
b=a==507
mostViolatedArticle_content=names(a[b])
mostViolatedArticle_content
stringr::str_detect(badEmployers$dt,"/01/")
stringr::str_detect(badEmployers$dt,"/02/")
stringr::str_detect(badEmployers$dt,"/03/")
sum(stringr::str_detect(badEmployers$dt,"/01/"))
sum(stringr::str_detect(badEmployers$dt,"/02/"))
sum(stringr::str_detect(badEmployers$dt,"/03/"))
sum(stringr::str_detect(badEmployers$dt,"/04/"))
sum(stringr::str_detect(badEmployers$dt,"/05/"))
sum(stringr::str_detect(badEmployers$dt,"/06/"))
sum(stringr::str_detect(badEmployers$dt,"/07/"))
sum(stringr::str_detect(badEmployers$dt,"/08/"))
sum(stringr::str_detect(badEmployers$dt,"/09/"))
sum(stringr::str_detect(badEmployers$dt,"/10/"))
sum(stringr::str_detect(badEmployers$dt,"/11/"))
sum(stringr::str_detect(badEmployers$dt,"/12/"))
# popularSentenceMonth
sum(stringr::str_detect(badEmployers$dt,"/01/"))
sum(stringr::str_detect(badEmployers$dt,"/02/"))
sum(stringr::str_detect(badEmployers$dt,"/03/"))
sum(stringr::str_detect(badEmployers$dt,"/04/"))
sum(stringr::str_detect(badEmployers$dt,"/05/"))
sum(stringr::str_detect(badEmployers$dt,"/06/"))
sum(stringr::str_detect(badEmployers$dt,"/07/"))
sum(stringr::str_detect(badEmployers$dt,"/08/"))
sum(stringr::str_detect(badEmployers$dt,"/09/"))
sum(stringr::str_detect(badEmployers$dt,"/10/"))
sum(stringr::str_detect(badEmployers$dt,"/11/"))
sum(stringr::str_detect(badEmployers$dt,"/12/"))
# popularSentenceMonth
sum(stringr::str_detect(badEmployers$dt,"/01/"))
sum(stringr::str_detect(badEmployers$dt,"/02/"))
sum(stringr::str_detect(badEmployers$dt,"/03/"))
sum(stringr::str_detect(badEmployers$dt,"/04/"))
sum(stringr::str_detect(badEmployers$dt,"/05/"))
sum(stringr::str_detect(badEmployers$dt,"/06/"))
sum(stringr::str_detect(badEmployers$dt,"/07/"))
sum(stringr::str_detect(badEmployers$dt,"/08/"))
sum(stringr::str_detect(badEmployers$dt,"/09/"))
sum(stringr::str_detect(badEmployers$dt,"/10/"))
sum(stringr::str_detect(badEmployers$dt,"/11/"))
sum(stringr::str_detect(badEmployers$dt,"/12/"))
popularSentenceMonth="11"
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
library(stringr)
library(glue)
str_sub("410873002", 5, 6)
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
str_extract(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳vector
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
str_extract(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳vector
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
str_extract(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳vector
studentIds <- c("410873029","410773005","410772035","410562123")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,"(107|108)")
phrase <- c("唧唧复唧唧")
# 目標是前面的唧唧
target_regex <- "唧唧"
pattern <- glue::glue("^{target_regex}")
print(pattern)
str_view(phrase, pattern)
library(stringr)
library(glue)
install.packages(htmlwidgets)
str_sub("410873002", 5, 6)
library(htmlwidgets)
phrase <- c("唧唧复唧唧")
# 目標是前面的唧唧
target_regex <- "唧唧"
pattern <- glue::glue("^{target_regex}")
print(pattern)
str_view(phrase, pattern)
library(stringr)
library(glue)
install.packages(htmlwidgets)
str_sub("410873002", 5, 6)
library(htmlwidgets)
phrase <- c("唧唧复唧唧")
# 目標是前面的唧唧
target_regex <- "唧唧"
pattern <- glue::glue("^{target_regex}")
print(pattern)
str_view(phrase, pattern)
library(stringr)
library(glue)
install.packages(htmltools)
str_sub("410873002", 5, 6)
library(htmltools)
