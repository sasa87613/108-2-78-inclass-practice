chinese=ordered(factor(table$國文))
chinese
ntpu_econtpu_eco%in%namelist
# congrats
ntpu_econtpu_eco[ntpu_econtpu_eco%in%namelist]
# congrats
g=ntpu_econtpu_eco[ntpu_econtpu_eco%in%namelist]
paste("恭喜",g,"同學錄取國立臺北大學經濟系")
# congrats
g=ntpu_econtpu_eco[ntpu_econtpu_eco%in%namelist]
congrats=paste("恭喜",g,"同學錄取國立臺北大學經濟系")
congrats
for(h in c(1:12)){i=sum(stringr::str_detect(badEmployers$dt,paste0(i,"/")))
}
# popularSentenceMonth
for(h in c(1:12)){i=sum(stringr::str_detect(badEmployers$dt,paste0(i,"/")))
}
i
# popularSentenceMonth
for(h in c(1:12)){paste0(i,"/")
}
i
# popularSentenceMonth
for(h in c(1:12)){i=paste0(i,"/")
}
i
# popularSentenceMonth
for(h in c(1:12)){i=paste0(h,"/")
}
i
# popularSentenceMonth
for(h in c(1:12)){
i=c(sum(stringr::str_detect(badEmployers$nt,paste0(h,"/"))))
}
i
# popularSentenceMonth
for(h in c(1:12)){
i=(sum(stringr::str_detect(badEmployers$nt,paste0(h,"/"))))
}
i
# popularSentenceMonth
for(h in c(1:12)){
i=(sum(stringr::str_detect(badEmployers$nt,"paste0(h,"/")")))
}
for(h in c(1:12)){
i=(sum(stringr::str_detect(badEmployers$nt,paste0(h,"/"))))
}
i
# popularSentenceMonth
for(h in c(1:12)){
i=c(paste0(h,"/"))
}
i
# popularSentenceMonth
for(h in c(1:12)){
i=c(paste0(h,"/"))
a=a+i
}
for(h in c(1:12)){
i=c(paste0(h,"/"))
a=c(a,i)
}
i
# popularSentenceMonth
for(h in c(1:12)){
i=cpaste0(h,"/")
a=c(a,i)
}
for(h in c(1:12)){
i=paste0(h,"/")
a=c(a,i)
}
i
# popularSentenceMonth
for(h in c(1:10)){
i=paste0(h,"/")
a=c(a,i)
}
i
# popularSentenceMonth
for(h in 1:12)){
for(i in 1:12)){
for(i in 1:12){
h=paste0(i,"/")
a=c(a,i)
}
i
# popularSentenceMonth
for(i in 1:12){
h=paste0(i,"/")
a=c(a,i)
}
a
# popularSentenceMonth
for(i in 1:12){
h=paste0(i,"/")
j=c(j,i)
}
j=NULL
for(i in 1:12){
h=paste0(i,"/")
j=c(j,i)
}
a
# popularSentenceMonth
j=NULL
for(i in 1:12){
h=paste0(i,"/")
j=c(j,i)
}
J
j=NULL
for(i in 1:12){
h=paste0(i,"/")
j=c(j,i)
}
j
# popularSentenceMonth
j=NULL
for(i in 1:12){
h=paste0(i,"/")
j=c(j,h)
}
j
# popularSentenceMonth
j=NULL
for(i in 1:12){
h=sum(stringr::str_detect(badEmployers$nt,paste0(i,"/")))
j=c(j,h)
}
j
# popularSentenceMonth
j=NULL
for(i in 1:12){
h=sum(stringr::str_detect(badEmployers$nt,paste0(i,"/")))
j=c(j,h)
}
j
# popularSentenceMonth
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
violatedArticles=levels(as.factor(badEmployers$law))
violatedArticles
table_countsByArticle=table(badEmployers$law)
table_countsByArticle
mostViolatedArticle=table_countsByArticle==507
mostViolatedArticle=table_countsByArticle[mostViolatedArticle]
mostViolatedArticle
a=table(as.factor(badEmployers$lawContent))
b=a==507
mostViolatedArticle_content=names(a[b])
mostViolatedArticle_content
stringr::str_detect(badEmployers$dt,"/01/")
stringr::str_detect(badEmployers$dt,"/02/")
stringr::str_detect(badEmployers$dt,"/03/")
sum(stringr::str_detect(badEmployers$dt,"/01/"))
sum(stringr::str_detect(badEmployers$dt,"/02/"))
sum(stringr::str_detect(badEmployers$dt,"/03/"))
sum(stringr::str_detect(badEmployers$dt,"/04/"))
sum(stringr::str_detect(badEmployers$dt,"/05/"))
sum(stringr::str_detect(badEmployers$dt,"/06/"))
sum(stringr::str_detect(badEmployers$dt,"/07/"))
sum(stringr::str_detect(badEmployers$dt,"/08/"))
sum(stringr::str_detect(badEmployers$dt,"/09/"))
sum(stringr::str_detect(badEmployers$dt,"/10/"))
sum(stringr::str_detect(badEmployers$dt,"/11/"))
sum(stringr::str_detect(badEmployers$dt,"/12/"))
# popularSentenceMonth
sum(stringr::str_detect(badEmployers$dt,"/01/"))
sum(stringr::str_detect(badEmployers$dt,"/02/"))
sum(stringr::str_detect(badEmployers$dt,"/03/"))
sum(stringr::str_detect(badEmployers$dt,"/04/"))
sum(stringr::str_detect(badEmployers$dt,"/05/"))
sum(stringr::str_detect(badEmployers$dt,"/06/"))
sum(stringr::str_detect(badEmployers$dt,"/07/"))
sum(stringr::str_detect(badEmployers$dt,"/08/"))
sum(stringr::str_detect(badEmployers$dt,"/09/"))
sum(stringr::str_detect(badEmployers$dt,"/10/"))
sum(stringr::str_detect(badEmployers$dt,"/11/"))
sum(stringr::str_detect(badEmployers$dt,"/12/"))
# popularSentenceMonth
sum(stringr::str_detect(badEmployers$dt,"/01/"))
sum(stringr::str_detect(badEmployers$dt,"/02/"))
sum(stringr::str_detect(badEmployers$dt,"/03/"))
sum(stringr::str_detect(badEmployers$dt,"/04/"))
sum(stringr::str_detect(badEmployers$dt,"/05/"))
sum(stringr::str_detect(badEmployers$dt,"/06/"))
sum(stringr::str_detect(badEmployers$dt,"/07/"))
sum(stringr::str_detect(badEmployers$dt,"/08/"))
sum(stringr::str_detect(badEmployers$dt,"/09/"))
sum(stringr::str_detect(badEmployers$dt,"/10/"))
sum(stringr::str_detect(badEmployers$dt,"/11/"))
sum(stringr::str_detect(badEmployers$dt,"/12/"))
popularSentenceMonth="11"
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
library(stringr)
library(glue)
str_sub("410873002", 5, 6)
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
str_extract(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳vector
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
str_extract(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳vector
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
str_extract(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳vector
studentIds <- c("410873029","410773005","410772035","410562123")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,"(107|108)")
phrase <- c("唧唧复唧唧")
# 目標是前面的唧唧
target_regex <- "唧唧"
pattern <- glue::glue("^{target_regex}")
print(pattern)
str_view(phrase, pattern)
library(stringr)
library(glue)
install.packages(htmlwidgets)
str_sub("410873002", 5, 6)
library(htmlwidgets)
phrase <- c("唧唧复唧唧")
# 目標是前面的唧唧
target_regex <- "唧唧"
pattern <- glue::glue("^{target_regex}")
print(pattern)
str_view(phrase, pattern)
library(stringr)
library(glue)
install.packages(htmlwidgets)
str_sub("410873002", 5, 6)
library(htmlwidgets)
phrase <- c("唧唧复唧唧")
# 目標是前面的唧唧
target_regex <- "唧唧"
pattern <- glue::glue("^{target_regex}")
print(pattern)
str_view(phrase, pattern)
library(stringr)
library(glue)
install.packages(htmltools)
str_sub("410873002", 5, 6)
library(htmltools)
char1 <- c("Wild","Apple","Donald","May","Avocada")
factor1 <- factor(char1)
levels(factor1)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(
str_sub(char2,1,1)
)
library(stingr)
library(stringr)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(
str_sub(char2,1,1)
)
sort(
str_sub(char2,2,2)
)
Sys.getlocale("LC_COLLATE")
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
# 不可排序類別：性別、縣市、是否境外移入
covid19$縣市 <-
factor(covid19$縣市)
covid19$性別 <-
factor(covid19$性別)
covid19$是否為境外移入 <-
factor(
covid19$是否為境外移入
)
# 可排序類別資料：年齡層
covid19$年齡層 <-
factor(
covid19$年齡層,
ordered=TRUE
)
levels(covid19$縣市)
levels(covid19$性別)
levels(covid19$是否為境外移入)
# 可排序類別資料：年齡層
covid19$年齡層 <-
factor(
covid19$年齡層,
ordered=TRUE
)
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
print(population)
class(population) # 判斷出是named integer vector
names(population) # 元素名稱是台灣各縣市
levels(covid19$縣市) # 是名稱字串向量
# 由於population元素值有names，可以用`[名稱字串向量]`取出所要的
levels(covid19$縣市) -> levelsInData
population[levelsInData] -> population
population <- sort(population, decreasing=T)
population
levels(covid19$年齡層)
level_names <- levels(covid19$年齡層)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
sort(startingAges) -> startingAges
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
covid19$年齡層 <-
factor(
covid19$年齡層, names(startingAges)
)
levels(covid19$年齡層)
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
sort(startingAges) -> startingAges
covid19$年齡層 <-
factor(
covid19$年齡層, names(startingAges)
)
levels(covid19$年齡層)
levels(covid19$年齡層)
level_names <- levels(covid19$年齡層)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
sort(startingAges) -> startingAges
covid19$年齡層 <-
factor(
covid19$年齡層, names(startingAges)
)
levels(covid19$年齡層)
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
levels(factor1) <- c("優","佳","尚可","普")
factor1
levels(factor1)[[1]] <- "Excellent"
levels(factor1)[c(3,4)] <- c("C","D")
factor1
levels(factor1) <- c("中部","北部","北部","中部","北部","中部")
factor1
factor1 <- factor(c("0-4歲","5-9歲","10歲以上","0-4歲","5-9歲","5-9歲","10歲以上"))
factor1
levels(factor1) <- c("0-9歲","10歲以上","0-9歲")
factor1
factor1 <- factor(c("0-4歲","5-9歲","10歲以上","0-4歲","5-9歲","5-9歲","10歲以上"))
factor1
covid19$地區 <- covid19$縣市
levels(covid19$地區)
currentLevels <- levels(covid19$地區)
# 整併
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"
currentLevels <- str_replace(currentLevels,
north_regex, "北部")
currentLevels <- str_replace(currentLevels,
middle_regex, "中部")
currentLevels <- str_replace(currentLevels,
south_regex, "南部")
newLevels <- str_replace(currentLevels,
east_regex, "東部")
levels(covid19$地區) <- newLevels
covid19$地區
library(purrr)
library(purrr)
library(purrr)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
pick_小新 <- example$name == "小新"
data_selected <-
list(
name=example$name[pick_小新],
weight=example$weight[pick_小新],
height=example$height[pick_小新],
hobby=example$hobby[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
map(example, ~.x[pick_小新]) ->
data_selected
data_selected
jsonlite::fromJSON("https://www.dropbox.com/s/6252gbdnv9owljm/dance.json?dl=1", simplifyDataFrame = F) -> dance
map(dance,~.x$title)
map(dance,~length(.x$showInfo)) ->
list_numberOfShows
View(list_numberOfShows)
threeHeigths <- c(Gary=178, John=182, Cam=175)
# 先排序由大到小，
sort(threeHeigths, decreasing=T) -> sorted_heights
# 把排好的人名取出
names(sorted_heights) -> sorted_persons
# 接著取出第一個位置的人名
sorted_persons[[1]] -> highestPerson
library(magrittr)
install.packages("magrittr")
library(magrittr)
install.packages("magrittr")
install.packages("magrittr")
library(magrittr)
sort(threeHeigths, decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
region <- cities
# 由cities創出每個元素對應的北部、東部、中部region factor
cities <- factor(c("台北","花蓮","台東","台中"))
levels(cities)
region <- cities
library(stringr)
# 以下為一連串的pipe operation
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
str_replace(currentLevels1,"花蓮|台東","東部") -> currentLevels2
str_replace(currentLevels2,"台中","中部") -> regionLevels
regionLevels -> levels(region)
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") ->
levels(region)
threeHeights %>%
sort(., decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
threeHeights %>%.
threeHeigths=c(100,200,300)
threeHeights %>%
sort(., decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") ->
levels(region)
threeHeigths=c(100,200,300)
threeHeigths=c(100,200,300)
threeHeights %>%
sort(., decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
threeHeigths <- c(Gary=178, John=182, Cam=175)
# 先排序由大到小，
sort(threeHeigths, decreasing=T) -> sorted_heights
# 把排好的人名取出
names(sorted_heights) -> sorted_persons
# 接著取出第一個位置的人名
sorted_persons[[1]] -> highestPerson
threeHeights %>%
.sort(., decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
threeHeights %>%
.sort(., decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
threeHeighths %>%
.sort(., decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
threeHeigths %>%
.sort(., decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
threeHeigths %>%
sort(., decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
